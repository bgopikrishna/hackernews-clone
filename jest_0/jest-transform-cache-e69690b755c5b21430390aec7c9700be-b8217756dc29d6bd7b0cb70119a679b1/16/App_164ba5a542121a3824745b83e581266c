"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.Table = exports.Search = exports.Button = undefined;var _jsxFileName = "/mnt/f/Gopi Krishna/Web Development/RTLR;/hn/src/App.js";var _react = require("react");var _react2 = _interopRequireDefault(_react);
var _axios = require("axios");var _axios2 = _interopRequireDefault(_axios);

require("./App.css");
var _propTypes = require("prop-types");var _propTypes2 = _interopRequireDefault(_propTypes);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

const DEFAULT_QUERY = "react";
const PATH_BASE = "https://hn.algolia.com/api/v1";
// const PATH_BASE = 'https://hn.foo.bar.com/api/v1';  error checking url
const PATH_SEARCH = "/search";
const PARAM_SEARCH = "query=";
const PARAM_PAGE = "page=";
const PARAM_HPP = "hitsPerPage=";
const DEFAULT_HPP = 100;
const url = `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${DEFAULT_QUERY}&${PARAM_PAGE}`;

class App extends _react.Component {

  constructor(props) {
    super(props);this._isMounted = false;

    this.state = {
      results: null,
      searchKey: "",
      searchTerm: DEFAULT_QUERY,
      error: null };


    this.setSearchTopStories = this.setSearchTopStories.bind(this);
    this.onSearchChange = this.onSearchChange.bind(this);
    this.onSearchSubmit = this.onSearchSubmit.bind(this);
    this.onDismiss = this.onDismiss.bind(this);
    this.fetchSearchTopStories = this.fetchSearchTopStories.bind(this);
    this.needTofetchTopStories = this.needTofetchTopStories.bind(this);
  }

  setSearchTopStories(result) {const
    hits = result.hits,page = result.page;var _state =
    this.state;const searchKey = _state.searchKey,results = _state.results;

    const oldHits =
    results && results[searchKey] ? results[searchKey].hits : [];
    const updatedHits = [...oldHits, ...hits];
    this.setState({
      results: Object.assign({},
      results, {
        [searchKey]: { hits: updatedHits, page } }) });


  }
  needTofetchTopStories(searchTerm) {
    return !this.state.results[searchTerm];
  }

  fetchSearchTopStories(searchTerm, page = 0) {
    (0, _axios2.default)(
    `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`).

    then(result => this._isMounted && this.setSearchTopStories(result.data)).
    catch(error => this._isMounted && this.setState({ error }));
  }

  onDismiss(id) {var _state2 =
    this.state;const searchKey = _state2.searchKey,results = _state2.results;var _results$searchKey =
    results[searchKey];const hits = _results$searchKey.hits,page = _results$searchKey.page;
    const isNotId = item => item.objectID !== id;
    const updatedHits = hits.filter(isNotId);
    this.setState({
      results: Object.assign({},
      results, {
        [searchKey]: { hits: updatedHits, page } }) });


  }
  onSearchChange(event) {
    this.setState({
      searchTerm: event.target.value });

  }
  onSearchSubmit(event) {const
    searchTerm = this.state.searchTerm;
    this.setState({ searchKey: searchTerm });
    if (this.needTofetchTopStories(searchTerm)) {
      this.fetchSearchTopStories(searchTerm);
    }
    event.preventDefault();
  }

  componentDidMount() {
    this._isMounted = true;const
    searchTerm = this.state.searchTerm;
    this.setState({ searchKey: searchTerm });
    this.fetchSearchTopStories(searchTerm);
  }
  componentWillUnmount() {
    this._isMounted = false;
  }

  render() {var _state3 =
    this.state;const searchTerm = _state3.searchTerm,results = _state3.results,searchKey = _state3.searchKey,error = _state3.error;
    const page =
    results && results[searchKey] && results[searchKey].page || 0;
    const list =
    results && results[searchKey] && results[searchKey].hits || [];

    return (
      _react2.default.createElement("div", { className: "page", __source: { fileName: _jsxFileName, lineNumber: 107 }, __self: this },
        _react2.default.createElement("div", { className: "interactions", __source: { fileName: _jsxFileName, lineNumber: 108 }, __self: this },
          _react2.default.createElement(Search, {
              value: searchTerm,
              onChange: this.onSearchChange,
              onSubmit: this.onSearchSubmit, __source: { fileName: _jsxFileName, lineNumber: 109 }, __self: this },

            _react2.default.createElement("strong", { __source: { fileName: _jsxFileName, lineNumber: 114 }, __self: this }, "Search"), " ")),


        error ?
        _react2.default.createElement("div", { className: "interactions", __source: { fileName: _jsxFileName, lineNumber: 118 }, __self: this },
          _react2.default.createElement("p", { __source: { fileName: _jsxFileName, lineNumber: 119 }, __self: this }, "Some Went Wrong")) :


        _react2.default.createElement(Table, { list: list, onDismiss: this.onDismiss, __source: { fileName: _jsxFileName, lineNumber: 122 }, __self: this }),

        _react2.default.createElement("div", { className: "more", __source: { fileName: _jsxFileName, lineNumber: 124 }, __self: this },
          _react2.default.createElement(Button, {
              onClick: () => this.fetchSearchTopStories(searchKey, page + 1), __source: { fileName: _jsxFileName, lineNumber: 125 }, __self: this }, "More"))));






  }}


const Search = ({ value, onChange, onSubmit, children }) => {
  let input;
  return (
    _react2.default.createElement("form", { onSubmit: onSubmit, __source: { fileName: _jsxFileName, lineNumber: 139 }, __self: undefined },
      _react2.default.createElement("input", { type: "text", value: value, onChange: onChange, ref: el => undefined.input = el, __source: { fileName: _jsxFileName, lineNumber: 140 }, __self: undefined }),
      _react2.default.createElement("button", { type: "submit", __source: { fileName: _jsxFileName, lineNumber: 141 }, __self: undefined }, children)));


};
//Search Proptypes

// q

//Table Component
const Table = ({ list, onDismiss }) => {
  return (
    _react2.default.createElement("div", { className: "table", __source: { fileName: _jsxFileName, lineNumber: 152 }, __self: undefined },
      list.map(item => {
        return (
          _react2.default.createElement("div", { key: item.objectID, className: "table-row", __source: { fileName: _jsxFileName, lineNumber: 155 }, __self: undefined },
            _react2.default.createElement("span", { style: { width: "40%" }, __source: { fileName: _jsxFileName, lineNumber: 156 }, __self: undefined },
              _react2.default.createElement("a", { href: item.url, __source: { fileName: _jsxFileName, lineNumber: 157 }, __self: undefined }, item.title)),

            _react2.default.createElement("span", { style: { width: "30%" }, __source: { fileName: _jsxFileName, lineNumber: 159 }, __self: undefined }, item.author),

            _react2.default.createElement("span", { style: { width: "10%" }, __source: { fileName: _jsxFileName, lineNumber: 161 }, __self: undefined }, item.points),
            _react2.default.createElement("span", { style: { width: "10%" }, __source: { fileName: _jsxFileName, lineNumber: 162 }, __self: undefined },
              _react2.default.createElement(Button, {
                  onClick: () => onDismiss(item.objectID),
                  className: "button-inline", __source: { fileName: _jsxFileName, lineNumber: 163 }, __self: undefined }, "Dismiss"))));






      })));


};

//Table Proptypes
// Table.propTypes = {
//   list: PropTypes.arrayOf(
//     PropTypes.shape({
//       objectID: PropTypes.string.isRequired,
//       author: PropTypes.string,
//       url: PropTypes.string,
//       num_comments: PropTypes.number,
//       points: PropTypes.number
//     })
//   ).isRequired,
//   onDismiss: PropTypes.func.isRequired
// };

//Button Component
const Button = ({ onClick, className = "", children }) => {
  return (
    _react2.default.createElement("button", { onClick: onClick, className: className, type: "button", __source: { fileName: _jsxFileName, lineNumber: 194 }, __self: undefined },
      children));


};

// Button Default Props Prop types
// Button.defaultProps = {
//   className: ""
// };

//Button PropType Checking
// Button.propTypes = {
//   onClick: PropTypes.func.isRequired,
//   className: PropTypes.string,
//   children: PropTypes.node.isRequired
// };
exports.default =
App;exports.

Button = Button;exports.Search = Search;exports.Table = Table;