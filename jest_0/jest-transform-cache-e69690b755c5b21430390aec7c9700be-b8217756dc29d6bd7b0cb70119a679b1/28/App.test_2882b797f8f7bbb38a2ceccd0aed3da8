"use strict";var _jsxFileName = "/mnt/f/Gopi Krishna/Web Development/RTLR;/hn/src/App.test.js";var _react = require("react");var _react2 = _interopRequireDefault(_react);
var _reactDom = require("react-dom");var _reactDom2 = _interopRequireDefault(_reactDom);
var _App = require("./App");var _App2 = _interopRequireDefault(_App);
var _reactTestRenderer = require("react-test-renderer");var _reactTestRenderer2 = _interopRequireDefault(_reactTestRenderer);

var _enzyme = require("enzyme");var _enzyme2 = _interopRequireDefault(_enzyme);
var _enzymeAdapterReact = require("enzyme-adapter-react-16");var _enzymeAdapterReact2 = _interopRequireDefault(_enzymeAdapterReact);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

_enzyme2.default.configure({ adapter: new _enzymeAdapterReact2.default() });

describe("App", () => {
  it("renders without crashing", () => {
    const div = document.createElement("div");
    _reactDom2.default.render(_react2.default.createElement(_App2.default, { __source: { fileName: _jsxFileName, lineNumber: 14 }, __self: undefined }), div);
    _reactDom2.default.unmountComponentAtNode(div);
  });
  test("has a valid snapshot ", () => {
    const component = _reactTestRenderer2.default.create(_react2.default.createElement(_App2.default, { __source: { fileName: _jsxFileName, lineNumber: 18 }, __self: undefined }));
    const tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });
});

describe("Search", () => {
  it("renders without crashing"),
  () => {
    const div = document.createElement("div");
    _reactDom2.default.render(_react2.default.createElement(_App.Search, { __source: { fileName: _jsxFileName, lineNumber: 28 }, __self: undefined }, "Search"), div);
    _reactDom2.default.unmountComponentAtNode(div);
  };

  test("has valid snapshot", () => {
    const component = _reactTestRenderer2.default.create(_react2.default.createElement(_App.Search, { __source: { fileName: _jsxFileName, lineNumber: 33 }, __self: undefined }, "Search"));
    const tree = component.toJSON;
    expect(tree).toMatchSnapshot();
  });
});

describe("Button", () => {
  it("renders without crashing", () => {
    const div = document.createElement("div");
    _reactDom2.default.render(_react2.default.createElement(_App.Button, { __source: { fileName: _jsxFileName, lineNumber: 42 }, __self: undefined }, "Give Me More"), div);
    _reactDom2.default.unmountComponentAtNode(div);
  });
  test("has a valid snapshot", () => {
    const component = _reactTestRenderer2.default.create(_react2.default.createElement(_App.Button, { __source: { fileName: _jsxFileName, lineNumber: 46 }, __self: undefined }, "Give Me More"));
    const tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });
});

describe("Table", () => {
  const props = {
    list: [
    { title: "1", author: "1", num_comments: 1, points: 2, objectID: "y" },
    { title: "2", author: "2", num_comments: 1, points: 2, objectID: "z" }],

    sortKey: "TITLE",
    isSortReverse: false };


  it("renders without crashing table", () => {
    const div = document.createElement("div");
    _reactDom2.default.render(_react2.default.createElement(_App.Table, Object.assign({}, props, { __source: { fileName: _jsxFileName, lineNumber: 64 }, __self: undefined })), div);
  });
  test("has a valid snapshot", () => {
    const component = _reactTestRenderer2.default.create(_react2.default.createElement(_App.Table, Object.assign({}, props, { __source: { fileName: _jsxFileName, lineNumber: 67 }, __self: undefined })));
    const tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });
});

describe("Table Enzyme", () => {
  const props = {
    list: [
    { title: "1", author: "1", num_comments: 1, points: 2, objectID: "y" },
    { title: "2", author: "2", num_comments: 1, points: 2, objectID: "z" }] };



  it("Shows to items in the list", () => {
    const element = (0, _enzyme.shallow)(_react2.default.createElement(_App.Table, Object.assign({}, props, { __source: { fileName: _jsxFileName, lineNumber: 82 }, __self: undefined })));
    expect(element.find(".table-row").length).toBe(2);
  });
});

describe("Button Enzyme", () => {
  const props = {
    list: [
    { title: "1", author: "1", num_comments: 1, points: 2, objectID: "y" },
    { title: "2", author: "2", num_comments: 1, points: 2, objectID: "z" }],

    sortKey: "TITLE",
    isSortReverse: false };


  it("Shows button configs ", () => {
    const element = (0, _enzyme.shallow)(_react2.default.createElement(_App.Button, Object.assign({}, props, { __source: { fileName: _jsxFileName, lineNumber: 98 }, __self: undefined }), "More"));
    expect(element.find());
  });
});